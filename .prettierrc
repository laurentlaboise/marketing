{
  // --- Basic Formatting Options ---
  "semi": true,
  // Controls the printing of semicolons at the end of statements.
  // `true` adds semicolons.

  "singleQuote": true,
  // Use single quotes instead of double quotes for string literals.
  // `true` enforces single quotes.

  "trailingComma": "all",
  // Print trailing commas wherever valid in ES5 (objects, arrays, etc.) and in function parameters.
  // `all` is preferred for cleaner diffs in modern JavaScript environments.

  "endOfLine": "lf",
  // Ensures consistent line endings across different operating systems.
  // `lf` (Line Feed) is the standard for Unix-like systems and Git.

  // --- Indentation Configuration ---
  "tabWidth": 2,
  // The number of spaces per indentation level.
  // Set to 2 spaces for consistent indentation across the project.

  "useTabs": false,
  // Indent with tabs instead of spaces.
  // `false` enforces the use of spaces for indentation.

  // --- Line Length Configuration ---
  "printWidth": 100,
  // The maximum line length Prettier will wrap.
  // Set to 100 characters, a common choice that balances readability and modern monitor widths.

  // --- HTML Formatting ---
  "htmlWhitespaceSensitivity": "css",
  // Specifies how Prettier handles whitespace in HTML.
  // `css` means Prettier will respect the default display property of tags.
  // This helps prevent unwanted line breaks in inline elements.

  "bracketSameLine": false,
  // Put the > of a multi-line HTML (HTML, JSX, Vue, Angular) element on the same line as the last attribute.
  // `false` puts it on a new line for better readability.

  // --- JavaScript/TypeScript/JSX Formatting ---
  "arrowParens": "avoid",
  // Include parentheses around a sole arrow function parameter.
  // `avoid` omits parentheses when a single parameter is present (e.g., `x => x`).

  "bracketSpacing": true,
  // Print spaces between brackets in object literals.
  // `true` adds spaces (e.g., `{ foo: bar }`).

  // --- CSS Formatting ---
  // Prettier handles CSS spacing and organization automatically based on its
  // default rules, which generally ensure proper formatting.
  // No specific CSS-only options are typically needed here unless overriding defaults.

  // --- Plugins for Extended Functionality ---
  "plugins": [
    "prettier-plugin-tailwindcss",
    // Integrates the Prettier plugin for Tailwind CSS, which automatically sorts
    // Tailwind utility classes according to a recommended order.
    // This ensures consistent class ordering and improves readability.

    // "prettier-plugin-vue" // Uncomment if your project uses Vue.js components.
    // This plugin formats Vue single-file components (.vue files).
  ],

  // --- Overrides for Specific File Types ---
  // You can define specific formatting rules for different file types here.
  "overrides": [
    {
      "files": "*.md",
      "options": {
        "printWidth": 120, // Allow a longer printWidth for Markdown files for better flow.
        "proseWrap": "always" // Ensure Markdown text is wrapped to the printWidth.
      }
    },
    {
      "files": "*.jsonc", // For JSON files that allow comments (e.g., tsconfig.json, vscode settings)
      "options": {
        "parser": "json" // Use the JSON parser for .jsonc files.
      }
    }
  ]
}

